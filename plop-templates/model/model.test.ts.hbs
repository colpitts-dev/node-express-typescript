import { faker } from '@faker-js/faker'

import { {{singularPascal model}}, {{singularPascal model}}Document, {{singularPascal model}}Input } from './{{singularCamel model}}.model'

const fake{{singularPascal model}} = () => ({
  title: faker.lorem.words(6)
})

describe('{{singularPascal model}} Model', () => {
  let {{singularCamel model}}: {{singularPascal model}}Document, {{singularCamel model}}Input: {{singularPascal model}}Input

  beforeAll(async () => {
    {{singularCamel model}}Input = fake{{singularPascal model}}()
    {{singularCamel model}} = new {{singularPascal model}}({ ...{{singularCamel model}}Input })

    await {{singularCamel model}}.save()
  })

  afterAll(async () => {
    await {{singularCamel model}}.deleteOne()
  })

  describe('when given valid input', () => {
    it('creates and reads a new document', async () => {
      const fetched{{singularPascal model}} = await {{singularPascal model}}.findOne({ _id: {{singularCamel model}}._id })

      expect(fetched{{singularPascal model}}).toBeDefined()
      expect(fetched{{singularPascal model}}?.title).toEqual({{singularCamel model}}Input.title)
    })

    it('updates an existing document', async () => {
      const {{singularCamel model}}UpdateInput: {{singularPascal model}}Input = fake{{singularPascal model}}()
      await {{singularPascal model}}.updateOne({ _id: {{singularCamel model}}._id }, { ...{{singularCamel model}}UpdateInput })
      const fetched{{singularPascal model}} = await {{singularPascal model}}.findOne({ _id: {{singularCamel model}}._id })
      expect(fetched{{singularPascal model}}).toBeDefined()
      expect(fetched{{singularPascal model}}).toMatchObject({{singularCamel model}}UpdateInput)
      expect(fetched{{singularPascal model}}).not.toMatchObject({{singularCamel model}}Input)
    })

    it('deletes an existing document', async () => {
      await {{singularPascal model}}.deleteOne({ _id: {{singularCamel model}}._id })
      const fetched{{singularPascal model}} = await {{singularPascal model}}.findOne({ _id: {{singularCamel model}}._id })
      expect(fetched{{singularPascal model}}).toBeNull()
    })
  })

  describe('when validating documents', () => {
    const invalid{{singularPascal model}} = new {{singularPascal model}}({
      title: undefined
    })
    const validationResult = invalid{{singularPascal model}}.validateSync()

    it('requires a valid title', () => {
      const validationError = validationResult?.errors?.title?.message
      expect(validationError).toBe('Title is required.')
    })
  })
})
